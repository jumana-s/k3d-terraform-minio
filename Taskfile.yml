version: "3"

silent: true

vars:
  CLUSTER_NAME: minio-cluster
  APP_NAME: k3d-terraform-minio
  HELM_VERS: v3.8.0
  METALLB_VERSION: v0.12.1

  KUBECTL: kubectl --context k3d-{{.CLUSTER_NAME}}

  RESET: \033[0m
  BLACK: \033[:0;30m
  RED: \033[:0;31m
  GREEN: \033[:0;32m

  # Nginx with LoadBalancer
  METALLB_EXAMPLE_SERVICE: |
    apiVersion: apps/v1
    kind: Deployment
    metadata:
      name: nginx-deployment
    spec:
      selector:
        matchLabels:
          app: nginx
      replicas: 2 # tells deployment to run 2 pods matching the template
      template:
        metadata:
          labels:
            app: nginx
        spec:
          containers:
            - name: nginx
              image: nginx:1.14.2
              ports:
                - containerPort: 80
    ---
    apiVersion: v1
    kind: Service
    metadata:
      name: my-service
    spec:
      type: LoadBalancer
      selector:
        app: nginx
      ports:
        - protocol: TCP
          port: 80
          targetPort: 80

tasks:
  deploy:
    prefix: deploy
    desc: |
      Create a k3d cluster
      Install metallb
      Install keycloak
      Configure Keycloak with terraform
      Install & Configure MinIO Gateway with Terraform
    cmds:
      - task: k3d:create
      - task: metallb:install
      - task: keycloak:install
      - task: hosts:keycloak
      - task: terraform:apply
      - task: hosts:minio
      - task: password:minio

  k3d:create:
    prefix: k3d > create
    desc: create a k3d cluster, using the name {{.CLUSTER_NAME}}
    cmds:
      - k3d cluster create {{.CLUSTER_NAME}} --kubeconfig-switch-context
      - k3d kubeconfig get {{.CLUSTER_NAME}} > kubeconfig.yaml
    generates:
      - kubeconfig.yaml
    status:
      - test -f kubeconfig.yaml
      - | 
        k3d cluster list -o json | \
          jq --arg CLUSTER {{.CLUSTER_NAME}} \
            -e 'any(.name == $CLUSTER)'

  k3d:destroy:
    prefix: k3d < destroy
    desc: destroy the k3d cluster with name {{.CLUSTER_NAME}}
    cmds:
      - k3d cluster delete {{.CLUSTER_NAME}}
      - rm -f kubeconfig.yaml terraform/.terraform.lock.hcl terraform/terraform.tfstate terraform/terraform.tfstate.backup
      - rm -rf terraform/.terraform

  k3d:start:
    prefix: k3d > start
    desc: start the k3d cluster, using the name {{.CLUSTER_NAME}}
    cmds:
      - "k3d cluster start {{.CLUSTER_NAME}}"

  k3d:stop:
    prefix: k3d > stop
    desc: start the k3d cluster, with the name {{.CLUSTER_NAME}}
    cmds:
      - "k3d cluster stop {{.CLUSTER_NAME}}"

  metallb:install:
    desc: create the metallb config
    cmds:
      - |
        {{.KUBECTL}} apply \
          -f https://raw.githubusercontent.com/metallb/metallb/{{.METALLB_VERSION}}/manifests/namespace.yaml
      - |
        {{.KUBECTL}} apply \
          -f https://raw.githubusercontent.com/metallb/metallb/{{.METALLB_VERSION}}/manifests/metallb.yaml
      - |
        {{.KUBECTL}} create \
          secret generic -n metallb-system memberlist \
          --from-literal=secretkey="$(openssl rand -base64 128)"
      - |
        {{.KUBECTL}} create cm -n metallb-system config \
          --from-literal=config="{{.CONTENT}}"
    vars:
      IP_RANGE:
        sh: |
          docker network inspect -f '{{ "{{" }}.IPAM.Config {{ "}}" }}' k3d-minio-cluster |
            tr -d '[]{}a-z' | 
            awk '{print $1}' |
            awk -F '.' '{printf("%d.%d", $1, $2)}'
      CONTENT: |
        address-pools:
        - name: default
          protocol: layer2
          addresses:
          - {{.IP_RANGE}}.255.200-{{.IP_RANGE}}.255.250
    status:
      - |
        kubectl get ns metallb-system -o json | \
          jq -e '.status.phase == "Active"'
      - |
        kubectl get cm -n metallb-system config

  metallb:example:create:
    desc: create example metallb service
    cmds:
      - |
        cat <<EOF | kubectl apply -f - 
        {{.METALLB_EXAMPLE_SERVICE}}
        EOF

  metallb:example:delete:
    desc: delete example metallb service
    cmds:
      - |
        cat <<EOF | kubectl delete -f - 
        {{.METALLB_EXAMPLE_SERVICE}}
        EOF

  helm:setup:
    desc: configure repos
    cmds:
      - cmd: helm repo add bitnami https://charts.bitnami.com/bitnami/
        ignore_error: true

  keycloak:install:
    desc: install keycloak helm chart
    deps: [helm:setup]
    cmds:
      - cmd: "{{.KUBECTL}} create ns keycloak"
        ignore_error: true
      - |
        helm install --kube-context k3d-{{.CLUSTER_NAME}} \
          --namespace keycloak \
          keycloak bitnami/keycloak
    status:
      - |
        kubectl get ns keycloak -o json | \
          jq -e '.status.phase == "Active"'
      - | 
        kubectl get statefulsets.apps -n keycloak keycloak -o json | \
          jq -e '.status | .replicas == .readyReplicas'

  keycloak:uninstall:
    desc: uninstall keycloak helm chart
    cmds:
      - cmd: kubectl --context k3d-{{.CLUSTER_NAME}} delete ns keycloak

  # Configure /etc/hosts with new or existing entry
  .host-configure:
    interactive: true
    desc: configure a host in the /etc/hosts file
    cmds:
      - cmd: |
          printf '{{.RED}}'
          echo 'Adding "{{.ARG_IP}}	{{.ARG_NAME}}" to /etc/hosts'
          printf '{{.RESET}}'

      - cmd: |
          if grep '{{.ARG_NAME}}' /etc/hosts; then \
              sudo sed -i 's/.*{{.ARG_NAME}}.*/{{.ARG_IP}}	{{.ARG_NAME}}/' /etc/hosts; \
          else \
              echo '{{.ARG_IP}}	{{.ARG_NAME}}' | sudo tee -a /etc/hosts; \
          fi > /dev/null 2>&1
      - cmd: |
          printf '{{.GREEN}}'
          echo "# /etc/hosts"
          cat /etc/hosts
          printf '{{.RESET}}'

  hosts:keycloak:
    interactive: true
    desc: configure /etc/hosts file
    cmds:
      - task: .host-configure
        vars:
          ARG_NAME: "{{.SERVICE}}.{{.NAMESPACE}}"
          ARG_IP: "{{.SERVICE_IP}}"
    vars:
      NAMESPACE: keycloak
      SERVICE: keycloak
      SERVICE_IP:
        sh: |
          IP=""
          while test -z "$IP"; do \
            sleep 1; \
            IP=$({{.KUBECTL}} get svc -n {{.NAMESPACE}} {{.SERVICE}} \
            -o jsonpath="{.status.loadBalancer.ingress[0].ip}"); \
          done
          echo "$IP"
    status:
      - |
        grep '{{.SERVICE_IP}}[[:blank:]]*{{.SERVICE}}.{{.NAMESPACE}}' /etc/hosts

  hosts:minio:
    interactive: true
    desc: configure /etc/hosts file
    cmds:
      - task: .host-configure
        vars:
          ARG_NAME: "{{.SERVICE}}.{{.NAMESPACE}}"
          ARG_IP: "{{.SERVICE_IP}}"
    vars:
      NAMESPACE: minio-gateway
      SERVICE: minio
      SERVICE_IP:
        sh: |
          IP=""
          while test -z "$IP"; do \
            sleep 1; \
            IP=$({{.KUBECTL}} get svc -n {{.NAMESPACE}} {{.SERVICE}} \
            -o jsonpath="{.status.loadBalancer.ingress[0].ip}"); \
          done
          echo "$IP"
    status:
      - |
        grep '{{.SERVICE_IP}}[[:blank:]]*{{.SERVICE}}.{{.NAMESPACE}}' /etc/hosts

  terraform:init:
    desc: terraform init
    cmds:
      - terraform init
    dir: ./terraform/

  terraform:plan:
    desc: terraform plan
    deps:
      - task: terraform:init
    cmds:
      - terraform plan
    dir: ./terraform/
    env:
      TF_VAR_kubecontext: "{{.APP_NAME}}"
      TF_VAR_keycloak_host:
        sh: |
          {{.KUBECTL}} get svc -n keycloak keycloak \
          -o jsonpath="{.status.loadBalancer.ingress[0].ip}"
      TF_VAR_keycloak_admin_password:
        sh: |
          {{.KUBECTL}} get secret -n keycloak keycloak \
            -o jsonpath="{.data.admin-password}" | base64 -d
    preconditions:
      - sh: |
          {{.KUBECTL}} wait \
             --for=condition=ready pod \
             --timeout=5m \
             -n keycloak \
             -l app.kubernetes.io/name=keycloak

  terraform:apply:
    desc: terraform apply
    deps:
      - task: terraform:init
    cmds:
      - terraform apply -auto-approve
    dir: ./terraform/
    env:
      TF_VAR_kubecontext: "{{.APP_NAME}}"
      TF_VAR_keycloak_host:
        sh: |
          {{.KUBECTL}} get svc -n keycloak keycloak \
          -o jsonpath="{.status.loadBalancer.ingress[0].ip}"
      TF_VAR_keycloak_admin_password:
        sh: |
          {{.KUBECTL}} get secret -n keycloak keycloak \
            -o jsonpath="{.data.admin-password}" | base64 -d
    preconditions:
      - sh: |
          {{.KUBECTL}} wait \
             --for=condition=ready pod \
             --timeout=5m \
             -n keycloak \
             -l app.kubernetes.io/name=keycloak

  password:minio:
    desc: Get the MinIO Password
    cmds:
      - |
        printf '{{.RED}}' >&2
        echo "# MinIO Username and Password" >&2
        printf '{{.RESET}}' >&2
      - |
        {{.KUBECTL}} get secret minio-initial-user \
          -n minio-gateway \
          -o json | jq -r '.data | to_entries | map({(.key): .value | @base64d}) | add'
